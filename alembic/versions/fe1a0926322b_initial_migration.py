"""Initial migration

Revision ID: fe1a0926322b
Revises: 
Create Date: 2025-06-28 11:30:17.138668

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'fe1a0926322b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('route_optimizations',
    sa.Column('optimization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('origin_lat', sa.DECIMAL(precision=10, scale=8), nullable=False),
    sa.Column('origin_lng', sa.DECIMAL(precision=11, scale=8), nullable=False),
    sa.Column('destination_lat', sa.DECIMAL(precision=10, scale=8), nullable=False),
    sa.Column('destination_lng', sa.DECIMAL(precision=11, scale=8), nullable=False),
    sa.Column('weight_kg', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('priority', sa.String(length=50), nullable=False),
    sa.Column('constraints', sa.Text(), nullable=True),
    sa.Column('optimal_route', sa.Text(), nullable=False),
    sa.Column('total_distance_km', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('estimated_cost_usd', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('estimated_carbon_kg', sa.DECIMAL(precision=10, scale=6), nullable=False),
    sa.Column('estimated_duration_hours', sa.DECIMAL(precision=6, scale=2), nullable=False),
    sa.Column('alternative_routes', sa.Text(), nullable=True),
    sa.Column('algorithm_used', sa.String(length=100), nullable=False),
    sa.Column('optimization_time_seconds', sa.DECIMAL(precision=8, scale=3), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("priority IN ('cost', 'carbon', 'balanced')", name='valid_priority'),
    sa.CheckConstraint('estimated_carbon_kg >= 0', name='positive_carbon'),
    sa.CheckConstraint('estimated_cost_usd >= 0', name='positive_cost'),
    sa.CheckConstraint('estimated_duration_hours > 0', name='positive_duration'),
    sa.CheckConstraint('total_distance_km > 0', name='positive_distance'),
    sa.CheckConstraint('weight_kg > 0', name='positive_weight'),
    sa.PrimaryKeyConstraint('optimization_id')
    )
    op.create_index('idx_optimization_priority', 'route_optimizations', ['priority'], unique=False)
    op.create_index('idx_optimization_route', 'route_optimizations', ['origin_lat', 'origin_lng', 'destination_lat', 'destination_lng'], unique=False)
    op.create_table('scenario_analyses',
    sa.Column('scenario_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('scenario_name', sa.String(length=255), nullable=False),
    sa.Column('scenario_type', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('parameters', sa.Text(), nullable=False),
    sa.Column('time_horizon_months', sa.Integer(), nullable=False),
    sa.Column('baseline_carbon_kg', sa.DECIMAL(precision=15, scale=6), nullable=False),
    sa.Column('scenario_carbon_kg', sa.DECIMAL(precision=15, scale=6), nullable=False),
    sa.Column('carbon_reduction_percent', sa.DECIMAL(precision=5, scale=2), nullable=False),
    sa.Column('baseline_cost_usd', sa.DECIMAL(precision=15, scale=2), nullable=False),
    sa.Column('scenario_cost_usd', sa.DECIMAL(precision=15, scale=2), nullable=False),
    sa.Column('cost_impact_percent', sa.DECIMAL(precision=8, scale=2), nullable=False),
    sa.Column('roi_percent', sa.DECIMAL(precision=8, scale=2), nullable=True),
    sa.Column('payback_period_months', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=False),
    sa.CheckConstraint('baseline_carbon_kg >= 0', name='positive_baseline_carbon'),
    sa.CheckConstraint('baseline_cost_usd >= 0', name='positive_baseline_cost'),
    sa.CheckConstraint('carbon_reduction_percent BETWEEN -100 AND 100', name='valid_carbon_reduction'),
    sa.CheckConstraint('scenario_carbon_kg >= 0', name='positive_scenario_carbon'),
    sa.CheckConstraint('scenario_cost_usd >= 0', name='positive_scenario_cost'),
    sa.CheckConstraint('time_horizon_months > 0', name='positive_time_horizon'),
    sa.PrimaryKeyConstraint('scenario_id')
    )
    op.create_index('idx_scenario_created', 'scenario_analyses', ['created_at'], unique=False)
    op.create_index('idx_scenario_type', 'scenario_analyses', ['scenario_type'], unique=False)
    op.create_table('suppliers',
    sa.Column('supplier_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('location_lat', sa.DECIMAL(precision=10, scale=8), nullable=False),
    sa.Column('location_lng', sa.DECIMAL(precision=11, scale=8), nullable=False),
    sa.Column('sustainability_score', sa.Integer(), nullable=False),
    sa.Column('renewable_energy_percent', sa.DECIMAL(precision=5, scale=2), nullable=False),
    sa.Column('carbon_intensity_kg_per_dollar', sa.DECIMAL(precision=10, scale=6), nullable=False),
    sa.Column('certification_level', sa.String(length=50), nullable=False),
    sa.Column('last_audit_date', sa.Date(), nullable=True),
    sa.Column('audit_score', sa.Integer(), nullable=True),
    sa.Column('waste_reduction_percent', sa.DECIMAL(precision=5, scale=2), nullable=False),
    sa.Column('water_efficiency_score', sa.Integer(), nullable=False),
    sa.Column('social_responsibility_score', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("certification_level IN ('None', 'Bronze', 'Silver', 'Gold')", name='valid_certification'),
    sa.CheckConstraint('carbon_intensity_kg_per_dollar >= 0', name='positive_carbon_intensity'),
    sa.CheckConstraint('renewable_energy_percent BETWEEN 0 AND 100', name='valid_renewable_energy'),
    sa.CheckConstraint('social_responsibility_score BETWEEN 1 AND 100', name='valid_social_score'),
    sa.CheckConstraint('sustainability_score BETWEEN 1 AND 100', name='valid_sustainability_score'),
    sa.CheckConstraint('waste_reduction_percent BETWEEN 0 AND 100', name='valid_waste_reduction'),
    sa.CheckConstraint('water_efficiency_score BETWEEN 1 AND 100', name='valid_water_score'),
    sa.PrimaryKeyConstraint('supplier_id'),
    sa.UniqueConstraint('name', name='unique_supplier_name')
    )
    op.create_index('idx_suppliers_location', 'suppliers', ['location_lat', 'location_lng'], unique=False)
    op.create_index('idx_suppliers_sustainability', 'suppliers', ['sustainability_score'], unique=False)
    op.create_table('weather_data',
    sa.Column('weather_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('location_lat', sa.DECIMAL(precision=10, scale=8), nullable=False),
    sa.Column('location_lng', sa.DECIMAL(precision=11, scale=8), nullable=False),
    sa.Column('recorded_at', sa.DateTime(), nullable=False),
    sa.Column('temperature_celsius', sa.DECIMAL(precision=5, scale=2), nullable=False),
    sa.Column('humidity_percent', sa.DECIMAL(precision=5, scale=2), nullable=False),
    sa.Column('wind_speed_kmh', sa.DECIMAL(precision=6, scale=2), nullable=False),
    sa.Column('wind_direction_degrees', sa.DECIMAL(precision=6, scale=2), nullable=False),
    sa.Column('precipitation_mm', sa.DECIMAL(precision=8, scale=2), nullable=False),
    sa.Column('fuel_efficiency_impact', sa.DECIMAL(precision=5, scale=4), nullable=False),
    sa.Column('route_delay_minutes', sa.Integer(), nullable=False),
    sa.Column('source', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('fuel_efficiency_impact > 0', name='positive_efficiency_impact'),
    sa.CheckConstraint('humidity_percent BETWEEN 0 AND 100', name='valid_humidity'),
    sa.CheckConstraint('precipitation_mm >= 0', name='positive_precipitation'),
    sa.CheckConstraint('wind_direction_degrees BETWEEN 0 AND 360', name='valid_wind_direction'),
    sa.CheckConstraint('wind_speed_kmh >= 0', name='positive_wind_speed'),
    sa.PrimaryKeyConstraint('weather_id')
    )
    op.create_index('idx_weather_location_time', 'weather_data', ['location_lat', 'location_lng', 'recorded_at'], unique=False)
    op.create_table('shipments',
    sa.Column('shipment_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('origin_lat', sa.DECIMAL(precision=10, scale=8), nullable=False),
    sa.Column('origin_lng', sa.DECIMAL(precision=11, scale=8), nullable=False),
    sa.Column('destination_lat', sa.DECIMAL(precision=10, scale=8), nullable=False),
    sa.Column('destination_lng', sa.DECIMAL(precision=11, scale=8), nullable=False),
    sa.Column('transport_mode', sa.String(length=50), nullable=False),
    sa.Column('weight_kg', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('distance_km', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('package_type', sa.String(length=50), nullable=False),
    sa.Column('departure_time', sa.DateTime(), nullable=False),
    sa.Column('arrival_time', sa.DateTime(), nullable=False),
    sa.Column('carrier_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('supplier_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("transport_mode IN ('air', 'ground', 'sea')", name='valid_transport_mode'),
    sa.CheckConstraint('distance_km > 0', name='positive_distance'),
    sa.CheckConstraint('weight_kg > 0', name='positive_weight'),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.supplier_id'], ),
    sa.PrimaryKeyConstraint('shipment_id')
    )
    op.create_index('idx_shipments_dates', 'shipments', ['departure_time', 'arrival_time'], unique=False)
    op.create_index('idx_shipments_mode', 'shipments', ['transport_mode'], unique=False)
    op.create_index('idx_shipments_supplier', 'shipments', ['supplier_id'], unique=False)
    op.create_table('carbon_emissions',
    sa.Column('emission_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('shipment_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('co2_kg', sa.DECIMAL(precision=10, scale=6), nullable=False),
    sa.Column('ch4_kg', sa.DECIMAL(precision=10, scale=6), nullable=False),
    sa.Column('n2o_kg', sa.DECIMAL(precision=10, scale=6), nullable=False),
    sa.Column('co2_equivalent_kg', sa.DECIMAL(precision=10, scale=6), nullable=False),
    sa.Column('emission_factor_source', sa.String(length=100), nullable=False),
    sa.Column('calculation_method', sa.String(length=100), nullable=False),
    sa.Column('weather_impact_factor', sa.DECIMAL(precision=5, scale=4), nullable=False),
    sa.Column('calculated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('co2_equivalent_kg >= 0', name='positive_co2e'),
    sa.CheckConstraint('co2_kg >= 0', name='positive_co2'),
    sa.CheckConstraint('weather_impact_factor > 0', name='positive_weather_factor'),
    sa.ForeignKeyConstraint(['shipment_id'], ['shipments.shipment_id'], ),
    sa.PrimaryKeyConstraint('emission_id')
    )
    op.create_index('idx_emissions_calculated', 'carbon_emissions', ['calculated_at'], unique=False)
    op.create_index('idx_emissions_shipment', 'carbon_emissions', ['shipment_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_emissions_shipment', table_name='carbon_emissions')
    op.drop_index('idx_emissions_calculated', table_name='carbon_emissions')
    op.drop_table('carbon_emissions')
    op.drop_index('idx_shipments_supplier', table_name='shipments')
    op.drop_index('idx_shipments_mode', table_name='shipments')
    op.drop_index('idx_shipments_dates', table_name='shipments')
    op.drop_table('shipments')
    op.drop_index('idx_weather_location_time', table_name='weather_data')
    op.drop_table('weather_data')
    op.drop_index('idx_suppliers_sustainability', table_name='suppliers')
    op.drop_index('idx_suppliers_location', table_name='suppliers')
    op.drop_table('suppliers')
    op.drop_index('idx_scenario_type', table_name='scenario_analyses')
    op.drop_index('idx_scenario_created', table_name='scenario_analyses')
    op.drop_table('scenario_analyses')
    op.drop_index('idx_optimization_route', table_name='route_optimizations')
    op.drop_index('idx_optimization_priority', table_name='route_optimizations')
    op.drop_table('route_optimizations')
    # ### end Alembic commands ### 